import random
from datetime import datetime
from typing import Any, Dict, Awaitable, Callable
from aiogram import F, Router, BaseMiddleware
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import app.scheduler as sc
import app.keyboards as kb
import app.database.requests as rq
import app.dictionary as dic

from app.middlewares import throttled

router = Router()

# Middleware –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤–≤–æ–¥–∞
class ConfirmationMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message | CallbackQuery,
        data: Dict[str, Any]
    ) -> Any:
        state = data.get('state')
        
        if state:
            current_state = await state.get_state()
            # –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è —Å–æ—Å—Ç–æ—è–Ω–∏—è free_agent
            if current_state == Reg.free_agent.state:
                if isinstance(event, CallbackQuery):
                    if event.data not in ["agreement_true", "agreement_false"]:
                        await event.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ!", show_alert=True)
                        return
                else:
                    await event.answer("–ü–æ–≥–æ–¥–∏, –¥–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞ —Ä–µ—à–∏–º —á—Ç–æ-—Ç–æ —Å —î—Ç–∏–º –∏–≥—Ä–æ–∫–æ–º! –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç üìÉ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –æ—Ç–∫–∞–∑–æ–º ‚ùå")
                    return
        return await handler(event, data)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware
router.message.middleware(ConfirmationMiddleware())
router.callback_query.middleware(ConfirmationMiddleware())

class Reg(StatesGroup):
    free_agent = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤–æ –≤—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è



@throttled(rate=2)
@router.message(F.text == '–°–≤–æ–±–æ–¥–Ω—ã–π –∞–≥–µ–Ω—Çüë§')
async def find_free_agent(message: Message, state: FSMContext):
    if await rq.spin_spending(message.from_user.id):
        await state.set_state(Reg.free_agent)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        result = None
        while result is None:
            print("+1")
            result = await rq.get_random_card()
        card, card_age, card_price, discount = result
        user = await rq.user(message.from_user.id)
        your_cash = user.cash
        await state.update_data(card_name=card.name, card_id=card.id, card_age=card_age, card_price=card_price)
        formatted_price = f"{card_price:,}".replace(",", " ")
        formatted_your_cash = f"{your_cash:,}".replace(",", " ")
        await message.answer_photo(
            photo=card.file_id,
            caption=f"–ù–∞—à–∏ —Å–∫–∞—É—Ç—ã –Ω–∞—à–ª–∏ –∏–≥—Ä–æ–∫–∞ —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–µ–π—á–∞—Å –Ω–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞‚ùåüìÉ\n\n"
                    f"üë§ –ò–º—è: {card.name}\n"
                    f"‚è≥ –í–æ–∑—Ä–∞—Å—Ç: {card_age} \n"
                    f"üîù –†–µ–π—Ç–∏–Ω–≥: {card.rating}\n"
                    f"üß© –ü–æ–∑–∏—Ü–∏—è –Ω–∞ –ø–æ–ª–µ: {dic.positions[card.position]}\n\n"
                    f"–ê–≥–µ–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–ø–∏—Å–Ω–æ–π –±–æ–Ω—É—Å: {formatted_price} üíµ (—Å–∫–∏–¥–∫–∞ {dic.discounts[discount]}%) \n\n"
                    f"–ù–∞ —Å—á–µ—Ç–∞—Ö –Ω–∞—à–µ–≥–æ –∫–ª—É–±–∞ —Å–µ–π—á–∞—Å: {formatted_your_cash} üíµ\n–ß—Ç–æ –¥–µ–ª–∞–µ–º?",
            reply_markup=kb.agreement
        )
    else:
        now = datetime.now()
        user = await rq.user(message.from_user.id)
        if not user.next_spin > now:
            await rq.spins_add(message.from_user.id)
            await find_free_agent(message, state)
            # await message.answer("–ê, —á—Ç–æ? –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞...")
        else:
            formatted_time = user.next_spin.strftime('%H:%M')
            await message.delete()
            await message.answer(f"–í—Å—Ç—Ä–µ—á–∞ —Å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è–º–∏ –°–≤–æ–±–æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞üë§ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞: {formatted_time} ‚åõ –ù–µ –æ–ø–∞–∑–¥—ã–≤–∞–π!", reply_markup=kb.main)

@router.callback_query(Reg.free_agent, F.data.in_(["agreement_true", "agreement_false"]))
async def handle_agreement(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    card_name = user_data.get('card_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    
    if callback.data == 'agreement_true':
        card_id = user_data.get('card_id')
        card_age = user_data.get('card_age')
        card_price = user_data.get('card_price')
        tg_id = callback.from_user.id
        result = await rq.add_card_to_user(tg_id, card_id, card_age, card_price)
        if result == 1:
            response_text = f'–û—Ç–ª–∏—á–Ω–æ ‚úÖ \n\n–¢–µ–ø–µ—Ä—å üë§ {card_name} ‚Äî –∏–≥—Ä–æ–∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã ü•≥'
        elif result == 0:
            response_text = f'''–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ü§® \n\n–ö–∞–∂–µ—Ç—Å—è üë§ {card_name} —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ... –ß—Ç–æ –∑–∞ –±–∞—Ä–¥–∞–∫, –∫–∞–∫ —Ç–∞–∫–æ–µ –≤–æ–æ–±—â–µ –º–æ–≥–ª–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏?! üòë'''
        else:
            response_text = f'''–î–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è üë§ {card_name} –Ω–∞–º –Ω–µ–º–Ω–æ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Çüò•\n\n–ù—É–∂–Ω–æ –≥–¥–µ-—Ç–æ —Ä–∞–∑–¥–æ–±—ã—Ç—å –µ—â–µ {result * -1}üíµ'''
    else:
        response_text = f'''–°–æ–≥–ª–∞—Å–µ–Ω üòè \n\n–ü—É—Å—Ç—å üë§ {card_name} –ø–æ–∏—â–µ—Ç —Å–µ–±–µ –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É! –ú—ã –∫–æ–≥–æ –ø–æ–ø–∞–ª–æ –Ω–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º ‚ùå'''
    
    await callback.message.edit_reply_markup()
    await callback.message.answer(response_text)
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    three_spins_check = await rq.three_spins_check(callback.from_user.id)
    if three_spins_check is True:
        next_spin = await rq.next_spin(callback.from_user.id)
        await sc.scheduler(next_spin, callback.bot, callback.from_user.id)
    await callback.answer()