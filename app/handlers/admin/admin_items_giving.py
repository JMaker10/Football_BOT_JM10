from typing import Any, Dict
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from config import ADMINS as ADMINS

import app.keyboards as kb
import app.database.requests as rq

router = Router()

class Reg(StatesGroup):
    giving = State()
    giving_spins = State()
    giving_cash = State()
    giving_card = State()
    giving_card_age = State()



#–í–´–î–ê–ß–ê
@router.message(F.text == '–í—ã–¥–∞—á–∞ üì©', F.from_user.id.in_(ADMINS))
async def giving_start(message: Message, state: FSMContext):
    await state.set_state(Reg.giving)
    await message.delete()
    bot_message = await message.answer("–í–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=ReplyKeyboardRemove())
    await state.update_data(prev_bot_message=bot_message.message_id)

@router.message(Reg.giving)
async def giving_get_id(message: Message, state: FSMContext):
    await message.delete()
    data = await state.get_data()
    if 'prev_bot_message' in data:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=data['prev_bot_message'])
        except Exception:
            pass  # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–µ –∞–±–æ –Ω–µ —ñ—Å–Ω—É—î    
    try:
        user_id = int(message.text)
        print(f"ID –≤–≤–µ–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {user_id}")
    except:
        await message.answer("–í–≤–µ–¥–∏ —Ü—ã—Ñ—Ä—ã.", reply_markup=kb.admin_menu)
    
    user_id = message.text
    print(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {user_id}")
    user = await rq.user(user_id)
    print(f"–ß–µ—Ä–µ–∑ —Ç–≥ –∞–π–¥–∏ –Ω–∞—à–ª–∏ –∏–≥—Ä–æ–∫–∞: {user}")

    if user:
        await state.update_data(user_id=user.tg_id)
        await message.answer(f"–í—ã–±–µ—Ä–∏ —á—Ç–æ –≤—ã–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –¢G ID {user.tg_id}", reply_markup=kb.admin_values)
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=kb.admin_menu)
        await state.clear()



#–ö–†–£–¢–ö–ò
@router.callback_query(F.data.in_(["giving_spins"]))
async def giving_spins(callback: CallbackQuery, state: FSMContext):  
    await state.set_state(Reg.giving_spins)
    await callback.answer()
    bot_message = await callback.message.answer("–í–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=ReplyKeyboardRemove())
    await state.update_data(prev_bot_message=bot_message.message_id)

@router.message(Reg.giving_spins)
async def giving_spins_finish(message: Message, state: FSMContext):
    await message.delete()
    data = await state.get_data()
    if 'prev_bot_message' in data:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=data['prev_bot_message'])
        except Exception:
            pass  # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–µ –∞–±–æ –Ω–µ —ñ—Å–Ω—É—î        
    user_id = data.get("user_id")  # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    spins_amount = 0
    try:
        spins_amount = int(message.text)
    except:
        pass
    await rq.add_some_spins(user_id, spins_amount)



#–î–ï–ù–¨–ì–ò
@router.callback_query(F.data.in_(["giving_cash"]))
async def giving_spins(callback: CallbackQuery, state: FSMContext):  
    await state.set_state(Reg.giving_cash)
    await callback.answer()
    bot_message = await callback.message.answer("–í–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=ReplyKeyboardRemove())
    await state.update_data(prev_bot_message=bot_message.message_id)

@router.message(Reg.giving_cash)
async def giving_cash_finish(message: Message, state: FSMContext):
    await message.delete()
    data = await state.get_data()
    if 'prev_bot_message' in data:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=data['prev_bot_message'])
        except Exception:
            pass  # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–µ –∞–±–æ –Ω–µ —ñ—Å–Ω—É—î        
    user_id = data.get("user_id")  # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    cash_amount = 0
    try:
        cash_amount = int(message.text)
    except:
        pass
    await rq.add_some_cash(user_id, cash_amount)



#–ö–ê–†–¢–´
@router.callback_query(F.data.in_(["giving_card"]))
async def giving_card(callback: CallbackQuery, state: FSMContext):  
    await state.set_state(Reg.giving_card)
    await callback.answer()
    bot_message = await callback.message.answer("–í–µ–¥–∏ ID –∫–∞—Ä—Ç–æ—á–∫–∏:", reply_markup=ReplyKeyboardRemove())
    await state.update_data(prev_bot_message=bot_message.message_id)
    

@router.message(Reg.giving_card)
async def giving_card_age(message: Message, state: FSMContext):
    await state.update_data(card_id=message.text)
    await message.delete()
    data = await state.get_data()
    if 'prev_bot_message' in data:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=data['prev_bot_message'])
        except Exception:
            pass  # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–µ –∞–±–æ –Ω–µ —ñ—Å–Ω—É—î        
    bot_message = await message.answer("–ù–∞–ø–∏—à–∏ –≤–æ–∑—Ä–∞—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏:")
    await state.update_data(prev_bot_message=bot_message.message_id)
    await state.set_state(Reg.giving_card_age)

@router.message(Reg.giving_card_age)
async def giving_card_finish(message: Message, state: FSMContext):    
    data = await state.get_data()
    if 'prev_bot_message' in data:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=data['prev_bot_message'])
        except Exception:
            pass  # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–µ –∞–±–æ –Ω–µ —ñ—Å–Ω—É—î     
    card_age = int(message.text)
    await message.delete()
    card_id = data.get("card_id")
    user_id = data.get("user_id")
    await rq.add_card_to_user_admin(user_id, card_id, card_age)

#–ù–ê–ó–ê–î
@router.callback_query(F.data.in_(["giving_back"]))
async def giving_back(callback: CallbackQuery, state: FSMContext):
        await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
        await callback.message.answer("–ü—Ä–æ–¥–æ–ª–∂–∏–º...", reply_markup=kb.admin_menu)
        await state.clear()
