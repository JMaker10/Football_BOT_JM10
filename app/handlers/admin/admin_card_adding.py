from typing import Any, Dict
from rapidfuzz import process
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from config import ADMINS as ADMINS

import app.keyboards as kb
import app.database.requests as rq
import app.dictionary as dic

router = Router()

class Reg(StatesGroup):
    name = State()
    rating = State()
    position = State()
    club = State()
    nationality = State()
    photo = State()

async def find_best_match(user_input: str, choices: list) -> str | None:
    """–ù–∞—Ö–æ–¥–∏—Ç —Å–∞–º—ã–π –ø–æ—Ö–æ–∂–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞"""
    best_match = process.extractOne(user_input, choices, score_cutoff=60)  # 60% —Å—Ö–æ–∂–µ—Å—Ç–∏
    return best_match[0] if best_match else None

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç
@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É ‚ûï', F.from_user.id.in_(ADMINS))
async def add_card_menu(message: Message, state: FSMContext):
    await state.set_state(Reg.name)
    await message.delete()
    bot_message = await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–∞—Ä—Ç—ã:', reply_markup=ReplyKeyboardRemove())
    await state.update_data(prev_bot_message=bot_message.message_id)

@router.message(Reg.name)
async def reg_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Reg.rating)
    await message.delete()
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞ (—è–∫—â–æ –≤–æ–Ω–æ —î)
    data = await state.get_data()
    if 'prev_bot_message' in data:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=data['prev_bot_message'])
        except Exception:
            pass  # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–µ –∞–±–æ –Ω–µ —ñ—Å–Ω—É—î
    bot_message = await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –∫–∞—Ä—Ç—ã (–æ—Ç 1 –¥–æ 100):', reply_markup=ReplyKeyboardRemove())
    await state.update_data(prev_bot_message=bot_message.message_id)

@router.message(Reg.rating)
async def reg_rating(message: Message, state: FSMContext):
    try:
        rating = int(message.text)
        if 1 <= rating <= 100:
            await state.update_data(rating=rating)
            await state.set_state(Reg.position)
            await message.delete()
            data = await state.get_data()
            if 'prev_bot_message' in data:
                try:
                    await message.bot.delete_message(chat_id=message.chat.id, message_id=data['prev_bot_message'])
                except Exception:
                    pass

            bot_message = await message.answer('–í—ã–±–µ—Ä–µ—Ç–µ –ø–æ–∑–∏—Ü–∏—é:', reply_markup=kb.positions)
            await state.update_data(prev_bot_message=bot_message.message_id)
        else:
            await message.answer('–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
    except ValueError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')

@router.callback_query(F.data.startswith("position_"), Reg.position)
async def reg_position(callback: CallbackQuery, state: FSMContext):
    position = callback.data.split("_")[1]  # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –ø—ñ—Å–ª—è "name_"
    if position == "back":
        pass
    else:
        await state.update_data(position=position)
        await state.set_state(Reg.club)
        data = await state.get_data()
        if 'prev_bot_message' in data:
            try:
                await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=data['prev_bot_message'])
            except Exception:
                pass
        bot_message = await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—É–±–∞ –∏–≥—Ä–æ–∫–∞:", reply_markup=ReplyKeyboardRemove())
        await state.update_data(prev_bot_message=bot_message.message_id)
        await callback.answer()

@router.message(Reg.club)
async def reg_club(message: Message, state: FSMContext):
    club_name = message.text.strip()
    existing_clubs = await rq.get_all_clubs()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—É–±–æ–≤ –∏–∑ –ë–î
    best_match = await find_best_match(club_name, existing_clubs)

    if best_match:
        await message.answer(f"–í—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É '{best_match}'?", reply_markup=kb.club_confirmation(best_match))
    else:
        await message.answer("–ö–ª—É–± –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—É–±–∞ —Å–Ω–æ–≤–∞.")


@router.callback_query(lambda c: c.data.startswith("club_"), Reg.club)
async def club_selection(callback: CallbackQuery, state: FSMContext):
    if callback.data == "club_again":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—É–±–∞ —Å–Ω–æ–≤–∞:")
        await callback.answer()
    else:
        club_name = callback.data.split("_")[1]
        club = await rq.get_club_by_name(club_name)
        await state.update_data(club=club)
        await state.set_state(Reg.nationality)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞:")
        await callback.answer()

@router.message(Reg.nationality)
async def reg_nationality(message: Message, state: FSMContext):
    nationality_name = message.text.strip()
    existing_nationalities = await rq.get_all_nationalities()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π –∏–∑ –ë–î

    best_match = await find_best_match(nationality_name, existing_nationalities)

    if best_match:
        await message.answer(f"–í—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É '{best_match}'?", reply_markup=kb.nationality_confirmation(best_match))
    else:
        await message.answer("–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–Ω–æ–≤–∞.")


@router.callback_query(lambda c: c.data.startswith("nationality_"), Reg.nationality)
async def nationality_selection(callback: CallbackQuery, state: FSMContext):
    if callback.data == "nationality_again":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–Ω–æ–≤–∞:")
        await callback.answer()
    else:
        nationality_name = callback.data.split("_")[1]
        nationality = await rq.get_nationality_by_name(nationality_name)
        await state.update_data(nationality=nationality)
        await state.set_state(Reg.photo)
        await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞—Ä—Ç—ã:")
        await callback.answer()


@router.message(Reg.photo, F.photo)
async def reg_photo(message: Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    data = await state.get_data()
    await rq.add_new_card(data['name'], data['rating'], data['position'], file_id, data['club'], data['nationality'])
    await message.delete()

    await message.answer_photo(
        photo=file_id,
        caption=f'–ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞‚úÖ\n\n'
                f'üë§ –ò–º—è: {data["name"]}\n'
                f'üîù –†–µ–π—Ç–∏–Ω–≥: {data["rating"]}\n'
                f'üß© –ü–æ–∑–∏—Ü–∏—è: {dic.positions[data["position"]]}\n'
                f'‚öΩ –ö–ª—É–±: {data["club"].name} ({data["club"].id})\n'
                f'üåç –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {data["nationality"].name} ({data["nationality"].id})',
        reply_markup=kb.admin_menu
    )
    await state.clear()
